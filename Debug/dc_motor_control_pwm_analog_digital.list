
dc_motor_control_pwm_analog_digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa0  08003fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fa0  08003fa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fa0  08003fa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000c0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000cc  200000cc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8fe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001978  00000000  00000000  0002b93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a38  00000000  00000000  0002ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa5b  00000000  00000000  0002e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d36a  00000000  00000000  0004924b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3521  00000000  00000000  000565b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f9ad6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002de8  00000000  00000000  000f9b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f58 	.word	0x08003f58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f58 	.word	0x08003f58

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fb17 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f859 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f983 	bl	80004e0 <MX_GPIO_Init>
  MX_ADC2_Init();
 80001da:	f000 f8ad 	bl	8000338 <MX_ADC2_Init>
  MX_TIM2_Init();
 80001de:	f000 f909 	bl	80003f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001e2:	2100      	movs	r1, #0
 80001e4:	4823      	ldr	r0, [pc, #140]	; (8000274 <main+0xac>)
 80001e6:	f002 ff75 	bl	80030d4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2110      	movs	r1, #16
 80001ee:	4822      	ldr	r0, [pc, #136]	; (8000278 <main+0xb0>)
 80001f0:	f001 fc8c 	bl	8001b0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2120      	movs	r1, #32
 80001f8:	481f      	ldr	r0, [pc, #124]	; (8000278 <main+0xb0>)
 80001fa:	f001 fc87 	bl	8001b0c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2) || HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_7))
 80001fe:	2104      	movs	r1, #4
 8000200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000204:	f001 fc6a 	bl	8001adc <HAL_GPIO_ReadPin>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d107      	bne.n	800021e <main+0x56>
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000214:	f001 fc62 	bl	8001adc <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d003      	beq.n	8000226 <main+0x5e>
	  {
		  pulseWidth = 0;
 800021e:	4b17      	ldr	r3, [pc, #92]	; (800027c <main+0xb4>)
 8000220:	2200      	movs	r2, #0
 8000222:	801a      	strh	r2, [r3, #0]
 8000224:	e01f      	b.n	8000266 <main+0x9e>
	  }
	  else
	  {
		  HAL_ADC_Start(&hadc2);
 8000226:	4816      	ldr	r0, [pc, #88]	; (8000280 <main+0xb8>)
 8000228:	f000 fce2 	bl	8000bf0 <HAL_ADC_Start>
		  if(HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK)
 800022c:	2105      	movs	r1, #5
 800022e:	4814      	ldr	r0, [pc, #80]	; (8000280 <main+0xb8>)
 8000230:	f000 fd94 	bl	8000d5c <HAL_ADC_PollForConversion>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d106      	bne.n	8000248 <main+0x80>
		  {
			  analogValue = HAL_ADC_GetValue(&hadc2);
 800023a:	4811      	ldr	r0, [pc, #68]	; (8000280 <main+0xb8>)
 800023c:	f000 fe5c 	bl	8000ef8 <HAL_ADC_GetValue>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <main+0xbc>)
 8000246:	801a      	strh	r2, [r3, #0]
		  }

		  pulseWidth = map(analogValue, 0, 4095, 0, 500);
 8000248:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0xbc>)
 800024a:	8818      	ldrh	r0, [r3, #0]
 800024c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2300      	movs	r3, #0
 8000254:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000258:	2100      	movs	r1, #0
 800025a:	f000 f98d 	bl	8000578 <map>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0xb4>)
 8000264:	801a      	strh	r2, [r3, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulseWidth);
 8000266:	4b05      	ldr	r3, [pc, #20]	; (800027c <main+0xb4>)
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4b02      	ldr	r3, [pc, #8]	; (8000274 <main+0xac>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
	  if(HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_2) || HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_7))
 8000270:	e7c5      	b.n	80001fe <main+0x36>
 8000272:	bf00      	nop
 8000274:	2000007c 	.word	0x2000007c
 8000278:	48000400 	.word	0x48000400
 800027c:	20000078 	.word	0x20000078
 8000280:	20000028 	.word	0x20000028
 8000284:	2000007a 	.word	0x2000007a

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b096      	sub	sp, #88	; 0x58
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f003 fe56 	bl	8003f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 031c 	add.w	r3, r7, #28
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]
 80002ba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002bc:	2302      	movs	r3, #2
 80002be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c4:	2310      	movs	r3, #16
 80002c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	2302      	movs	r3, #2
 80002ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002cc:	2300      	movs	r3, #0
 80002ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fc2e 	bl	8001b3c <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002e6:	f000 f96c 	bl	80005c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ee:	2300      	movs	r3, #0
 80002f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fb21 	bl	800294c <HAL_RCC_ClockConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000310:	f000 f957 	bl	80005c2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000314:	2380      	movs	r3, #128	; 0x80
 8000316:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f002 fcf9 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800032c:	f000 f949 	bl	80005c2 <Error_Handler>
  }
}
 8000330:	bf00      	nop
 8000332:	3758      	adds	r7, #88	; 0x58
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}

08000338 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033e:	463b      	mov	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
 800034c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800034e:	4b27      	ldr	r3, [pc, #156]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000350:	4a27      	ldr	r2, [pc, #156]	; (80003f0 <MX_ADC2_Init+0xb8>)
 8000352:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800035a:	4b24      	ldr	r3, [pc, #144]	; (80003ec <MX_ADC2_Init+0xb4>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000360:	4b22      	ldr	r3, [pc, #136]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000366:	4b21      	ldr	r3, [pc, #132]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000368:	2201      	movs	r2, #1
 800036a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <MX_ADC2_Init+0xb4>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000376:	2200      	movs	r2, #0
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <MX_ADC2_Init+0xb4>)
 800037c:	2201      	movs	r2, #1
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000388:	2201      	movs	r2, #1
 800038a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_ADC2_Init+0xb4>)
 800038e:	2200      	movs	r2, #0
 8000390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_ADC2_Init+0xb4>)
 8000396:	2204      	movs	r2, #4
 8000398:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_ADC2_Init+0xb4>)
 800039c:	2200      	movs	r2, #0
 800039e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_ADC2_Init+0xb4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003a6:	4811      	ldr	r0, [pc, #68]	; (80003ec <MX_ADC2_Init+0xb4>)
 80003a8:	f000 fa90 	bl	80008cc <HAL_ADC_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80003b2:	f000 f906 	bl	80005c2 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4619      	mov	r1, r3
 80003d2:	4806      	ldr	r0, [pc, #24]	; (80003ec <MX_ADC2_Init+0xb4>)
 80003d4:	f000 fd9e 	bl	8000f14 <HAL_ADC_ConfigChannel>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003de:	f000 f8f0 	bl	80005c2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000028 	.word	0x20000028
 80003f0:	50000100 	.word	0x50000100

080003f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08e      	sub	sp, #56	; 0x38
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000414:	463b      	mov	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <MX_TIM2_Init+0xe8>)
 8000428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 800042e:	4b2b      	ldr	r3, [pc, #172]	; (80004dc <MX_TIM2_Init+0xe8>)
 8000430:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000434:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b29      	ldr	r3, [pc, #164]	; (80004dc <MX_TIM2_Init+0xe8>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800043c:	4b27      	ldr	r3, [pc, #156]	; (80004dc <MX_TIM2_Init+0xe8>)
 800043e:	2263      	movs	r2, #99	; 0x63
 8000440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <MX_TIM2_Init+0xe8>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000448:	4b24      	ldr	r3, [pc, #144]	; (80004dc <MX_TIM2_Init+0xe8>)
 800044a:	2200      	movs	r2, #0
 800044c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800044e:	4823      	ldr	r0, [pc, #140]	; (80004dc <MX_TIM2_Init+0xe8>)
 8000450:	f002 fd88 	bl	8002f64 <HAL_TIM_Base_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800045a:	f000 f8b2 	bl	80005c2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800045e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000468:	4619      	mov	r1, r3
 800046a:	481c      	ldr	r0, [pc, #112]	; (80004dc <MX_TIM2_Init+0xe8>)
 800046c:	f003 f832 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000476:	f000 f8a4 	bl	80005c2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800047a:	4818      	ldr	r0, [pc, #96]	; (80004dc <MX_TIM2_Init+0xe8>)
 800047c:	f002 fdc9 	bl	8003012 <HAL_TIM_PWM_Init>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000486:	f000 f89c 	bl	80005c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	4619      	mov	r1, r3
 8000498:	4810      	ldr	r0, [pc, #64]	; (80004dc <MX_TIM2_Init+0xe8>)
 800049a:	f003 fcc3 	bl	8003e24 <HAL_TIMEx_MasterConfigSynchronization>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004a4:	f000 f88d 	bl	80005c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004a8:	2360      	movs	r3, #96	; 0x60
 80004aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 80004ac:	2332      	movs	r3, #50	; 0x32
 80004ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b8:	463b      	mov	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	4807      	ldr	r0, [pc, #28]	; (80004dc <MX_TIM2_Init+0xe8>)
 80004c0:	f002 fef4 	bl	80032ac <HAL_TIM_PWM_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80004ca:	f000 f87a 	bl	80005c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <MX_TIM2_Init+0xe8>)
 80004d0:	f000 f8fc 	bl	80006cc <HAL_TIM_MspPostInit>

}
 80004d4:	bf00      	nop
 80004d6:	3738      	adds	r7, #56	; 0x38
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000007c 	.word	0x2000007c

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 030c 	add.w	r3, r7, #12
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0x90>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <MX_GPIO_Init+0x90>)
 80004fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_GPIO_Init+0x90>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0x90>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <MX_GPIO_Init+0x90>)
 8000514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_GPIO_Init+0x90>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2130      	movs	r1, #48	; 0x30
 800052a:	4812      	ldr	r0, [pc, #72]	; (8000574 <MX_GPIO_Init+0x94>)
 800052c:	f001 faee 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 8000530:	2384      	movs	r3, #132	; 0x84
 8000532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f001 f957 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800054a:	2330      	movs	r3, #48	; 0x30
 800054c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	2301      	movs	r3, #1
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4619      	mov	r1, r3
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_GPIO_Init+0x94>)
 8000562:	f001 f949 	bl	80017f8 <HAL_GPIO_Init>

}
 8000566:	bf00      	nop
 8000568:	3720      	adds	r7, #32
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	48000400 	.word	0x48000400

08000578 <map>:

/* USER CODE BEGIN 4 */

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8000578:	b490      	push	{r4, r7}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4604      	mov	r4, r0
 8000580:	4608      	mov	r0, r1
 8000582:	4611      	mov	r1, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4623      	mov	r3, r4
 8000588:	80fb      	strh	r3, [r7, #6]
 800058a:	4603      	mov	r3, r0
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	460b      	mov	r3, r1
 8000590:	807b      	strh	r3, [r7, #2]
 8000592:	4613      	mov	r3, r2
 8000594:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000596:	88fa      	ldrh	r2, [r7, #6]
 8000598:	88bb      	ldrh	r3, [r7, #4]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	8a39      	ldrh	r1, [r7, #16]
 800059e:	883a      	ldrh	r2, [r7, #0]
 80005a0:	1a8a      	subs	r2, r1, r2
 80005a2:	fb02 f203 	mul.w	r2, r2, r3
 80005a6:	8879      	ldrh	r1, [r7, #2]
 80005a8:	88bb      	ldrh	r3, [r7, #4]
 80005aa:	1acb      	subs	r3, r1, r3
 80005ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	883b      	ldrh	r3, [r7, #0]
 80005b4:	4413      	add	r3, r2
 80005b6:	b29b      	uxth	r3, r3
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc90      	pop	{r4, r7}
 80005c0:	4770      	bx	lr

080005c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c6:	b672      	cpsid	i
}
 80005c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ca:	e7fe      	b.n	80005ca <Error_Handler+0x8>

080005cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_MspInit+0x44>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <HAL_ADC_MspInit+0x74>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d124      	bne.n	8000680 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_ADC_MspInit+0x78>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_ADC_MspInit+0x78>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_ADC_MspInit+0x78>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_ADC_MspInit+0x78>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_ADC_MspInit+0x78>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_ADC_MspInit+0x78>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000666:	2310      	movs	r3, #16
 8000668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066a:	2303      	movs	r3, #3
 800066c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f001 f8bc 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	50000100 	.word	0x50000100
 800068c:	40021000 	.word	0x40021000

08000690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006a0:	d10b      	bne.n	80006ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_TIM_Base_MspInit+0x38>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_TIM_Base_MspInit+0x38>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_TIM_Base_MspInit+0x38>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ec:	d11c      	bne.n	8000728 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_TIM_MspPostInit+0x64>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_TIM_MspPostInit+0x64>)
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <HAL_TIM_MspPostInit+0x64>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000706:	2301      	movs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000716:	2301      	movs	r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	4619      	mov	r1, r3
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f001 f868 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 f884 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b0:	480d      	ldr	r0, [pc, #52]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b2:	490e      	ldr	r1, [pc, #56]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b8:	e002      	b.n	80007c0 <LoopCopyDataInit>

080007ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007be:	3304      	adds	r3, #4

080007c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c4:	d3f9      	bcc.n	80007ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c8:	4c0b      	ldr	r4, [pc, #44]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007cc:	e001      	b.n	80007d2 <LoopFillZerobss>

080007ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d0:	3204      	adds	r2, #4

080007d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d4:	d3fb      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d6:	f7ff ffd7 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007da:	f003 fb91 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007de:	f7ff fcf3 	bl	80001c8 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f0:	08003fa8 	.word	0x08003fa8
  ldr r2, =_sbss
 80007f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007f8:	200000cc 	.word	0x200000cc

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 ffbd 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff fed6 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 ffc7 	bl	80017de <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 ff9d 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	200000c8 	.word	0x200000c8

080008b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	200000c8 	.word	0x200000c8

080008cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09a      	sub	sp, #104	; 0x68
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008da:	2300      	movs	r3, #0
 80008dc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	e172      	b.n	8000bd2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d176      	bne.n	80009ec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	2b00      	cmp	r3, #0
 8000904:	d152      	bne.n	80009ac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2200      	movs	r2, #0
 8000910:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe77 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d13b      	bne.n	80009ac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f000 fe13 	bl	8001560 <ADC_Disable>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	f003 0310 	and.w	r3, r3, #16
 8000948:	2b00      	cmp	r3, #0
 800094a:	d12f      	bne.n	80009ac <HAL_ADC_Init+0xe0>
 800094c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000950:	2b00      	cmp	r3, #0
 8000952:	d12b      	bne.n	80009ac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800095c:	f023 0302 	bic.w	r3, r3, #2
 8000960:	f043 0202 	orr.w	r2, r3, #2
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000976:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000986:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000988:	4b94      	ldr	r3, [pc, #592]	; (8000bdc <HAL_ADC_Init+0x310>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a94      	ldr	r2, [pc, #592]	; (8000be0 <HAL_ADC_Init+0x314>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9a      	lsrs	r2, r3, #18
 8000994:	4613      	mov	r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800099e:	e002      	b.n	80009a6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f9      	bne.n	80009a0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009c8:	d110      	bne.n	80009ec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f023 0312 	bic.w	r3, r3, #18
 80009d2:	f043 0210 	orr.w	r2, r3, #16
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f043 0201 	orr.w	r2, r3, #1
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f040 80df 	bne.w	8000bb8 <HAL_ADC_Init+0x2ec>
 80009fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f040 80da 	bne.w	8000bb8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 80d2 	bne.w	8000bb8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a1c:	f043 0202 	orr.w	r2, r3, #2
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a24:	4b6f      	ldr	r3, [pc, #444]	; (8000be4 <HAL_ADC_Init+0x318>)
 8000a26:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a30:	d102      	bne.n	8000a38 <HAL_ADC_Init+0x16c>
 8000a32:	4b6d      	ldr	r3, [pc, #436]	; (8000be8 <HAL_ADC_Init+0x31c>)
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	e002      	b.n	8000a3e <HAL_ADC_Init+0x172>
 8000a38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a3c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d108      	bne.n	8000a5e <HAL_ADC_Init+0x192>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d101      	bne.n	8000a5e <HAL_ADC_Init+0x192>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <HAL_ADC_Init+0x194>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11c      	bne.n	8000a9e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a64:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d010      	beq.n	8000a8c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d107      	bne.n	8000a86 <HAL_ADC_Init+0x1ba>
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <HAL_ADC_Init+0x1ba>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e000      	b.n	8000a88 <HAL_ADC_Init+0x1bc>
 8000a86:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d108      	bne.n	8000a9e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a9c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	7e5b      	ldrb	r3, [r3, #25]
 8000aa2:	035b      	lsls	r3, r3, #13
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000aa8:	2a01      	cmp	r2, #1
 8000aaa:	d002      	beq.n	8000ab2 <HAL_ADC_Init+0x1e6>
 8000aac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab0:	e000      	b.n	8000ab4 <HAL_ADC_Init+0x1e8>
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11b      	bne.n	8000b0a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7e5b      	ldrb	r3, [r3, #25]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d109      	bne.n	8000aee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	045a      	lsls	r2, r3, #17
 8000ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aea:	663b      	str	r3, [r7, #96]	; 0x60
 8000aec:	e00d      	b.n	8000b0a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000af6:	f043 0220 	orr.w	r2, r3, #32
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f043 0201 	orr.w	r2, r3, #1
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d007      	beq.n	8000b22 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 030c 	and.w	r3, r3, #12
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d114      	bne.n	8000b5a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b3e:	f023 0302 	bic.w	r3, r3, #2
 8000b42:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	7e1b      	ldrb	r3, [r3, #24]
 8000b48:	039a      	lsls	r2, r3, #14
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4313      	orrs	r3, r2
 8000b54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b56:	4313      	orrs	r3, r2
 8000b58:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <HAL_ADC_Init+0x320>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6812      	ldr	r2, [r2, #0]
 8000b68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10c      	bne.n	8000b90 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f023 010f 	bic.w	r1, r3, #15
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b8e:	e007      	b.n	8000ba0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 020f 	bic.w	r2, r2, #15
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f023 0303 	bic.w	r3, r3, #3
 8000bae:	f043 0201 	orr.w	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb6:	e00a      	b.n	8000bce <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f023 0312 	bic.w	r3, r3, #18
 8000bc0:	f043 0210 	orr.w	r2, r3, #16
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000bc8:	2301      	movs	r3, #1
 8000bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3768      	adds	r7, #104	; 0x68
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	50000300 	.word	0x50000300
 8000be8:	50000100 	.word	0x50000100
 8000bec:	fff0c007 	.word	0xfff0c007

08000bf0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 809c 	bne.w	8000d44 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d101      	bne.n	8000c1a <HAL_ADC_Start+0x2a>
 8000c16:	2302      	movs	r3, #2
 8000c18:	e097      	b.n	8000d4a <HAL_ADC_Start+0x15a>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 fc38 	bl	8001498 <ADC_Enable>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f040 8083 	bne.w	8000d3a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c3c:	f023 0301 	bic.w	r3, r3, #1
 8000c40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c48:	4b42      	ldr	r3, [pc, #264]	; (8000d54 <HAL_ADC_Start+0x164>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <HAL_ADC_Start+0x6e>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5c:	d115      	bne.n	8000c8a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d027      	beq.n	8000cc8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c88:	e01e      	b.n	8000cc8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c9e:	d004      	beq.n	8000caa <HAL_ADC_Start+0xba>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a2c      	ldr	r2, [pc, #176]	; (8000d58 <HAL_ADC_Start+0x168>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_ADC_Start+0xd8>
 8000caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d007      	beq.n	8000cc8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd4:	d106      	bne.n	8000ce4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f023 0206 	bic.w	r2, r3, #6
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
 8000ce2:	e002      	b.n	8000cea <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	221c      	movs	r2, #28
 8000cf8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_ADC_Start+0x164>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d010      	beq.n	8000d28 <HAL_ADC_Start+0x138>
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_ADC_Start+0x164>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	d00a      	beq.n	8000d28 <HAL_ADC_Start+0x138>
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_ADC_Start+0x164>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 031f 	and.w	r3, r3, #31
 8000d1a:	2b09      	cmp	r3, #9
 8000d1c:	d004      	beq.n	8000d28 <HAL_ADC_Start+0x138>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d26:	d10f      	bne.n	8000d48 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0204 	orr.w	r2, r2, #4
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	e006      	b.n	8000d48 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000d42:	e001      	b.n	8000d48 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000d44:	2302      	movs	r3, #2
 8000d46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	50000300 	.word	0x50000300
 8000d58:	50000100 	.word	0x50000100

08000d5c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d102      	bne.n	8000d78 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000d72:	2308      	movs	r3, #8
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e02e      	b.n	8000dd6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d78:	4b5e      	ldr	r3, [pc, #376]	; (8000ef4 <HAL_ADC_PollForConversion+0x198>)
 8000d7a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	f003 031f 	and.w	r3, r3, #31
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d112      	bne.n	8000dae <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11d      	bne.n	8000dd2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f043 0220 	orr.w	r2, r3, #32
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e09d      	b.n	8000eea <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f043 0220 	orr.w	r2, r3, #32
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e08b      	b.n	8000eea <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dd6:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <HAL_ADC_PollForConversion+0x198>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <HAL_ADC_PollForConversion+0x90>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dea:	d104      	bne.n	8000df6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	e003      	b.n	8000dfe <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000df6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000dfe:	f7ff fd59 	bl	80008b4 <HAL_GetTick>
 8000e02:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e04:	e021      	b.n	8000e4a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d01d      	beq.n	8000e4a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d007      	beq.n	8000e24 <HAL_ADC_PollForConversion+0xc8>
 8000e14:	f7ff fd4e 	bl	80008b4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d212      	bcs.n	8000e4a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10b      	bne.n	8000e4a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f043 0204 	orr.w	r2, r3, #4
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e04f      	b.n	8000eea <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0d6      	beq.n	8000e06 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d131      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d12c      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d125      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d112      	bne.n	8000ebe <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d112      	bne.n	8000ed6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	641a      	str	r2, [r3, #64]	; 0x40
 8000ebc:	e00b      	b.n	8000ed6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f043 0220 	orr.w	r2, r3, #32
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	50000300 	.word	0x50000300

08000ef8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b09b      	sub	sp, #108	; 0x6c
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d101      	bne.n	8000f36 <HAL_ADC_ConfigChannel+0x22>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e2a5      	b.n	8001482 <HAL_ADC_ConfigChannel+0x56e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 8289 	bne.w	8001460 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d81c      	bhi.n	8000f90 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	461a      	mov	r2, r3
 8000f6a:	231f      	movs	r3, #31
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4019      	ands	r1, r3
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa00 f203 	lsl.w	r2, r0, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8e:	e063      	b.n	8001058 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b09      	cmp	r3, #9
 8000f96:	d81e      	bhi.n	8000fd6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	3b1e      	subs	r3, #30
 8000fac:	221f      	movs	r2, #31
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	4019      	ands	r1, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	3b1e      	subs	r3, #30
 8000fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd4:	e040      	b.n	8001058 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b0e      	cmp	r3, #14
 8000fdc:	d81e      	bhi.n	800101c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	3b3c      	subs	r3, #60	; 0x3c
 8000ff2:	221f      	movs	r2, #31
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	3b3c      	subs	r3, #60	; 0x3c
 800100e:	fa00 f203 	lsl.w	r2, r0, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
 800101a:	e01d      	b.n	8001058 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	3b5a      	subs	r3, #90	; 0x5a
 8001030:	221f      	movs	r2, #31
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	4019      	ands	r1, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3b5a      	subs	r3, #90	; 0x5a
 800104c:	fa00 f203 	lsl.w	r2, r0, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 80e5 	bne.w	8001232 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b09      	cmp	r3, #9
 800106e:	d91c      	bls.n	80010aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6999      	ldr	r1, [r3, #24]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	3b1e      	subs	r3, #30
 8001082:	2207      	movs	r2, #7
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	4019      	ands	r1, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	3b1e      	subs	r3, #30
 800109c:	fa00 f203 	lsl.w	r2, r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	619a      	str	r2, [r3, #24]
 80010a8:	e019      	b.n	80010de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6959      	ldr	r1, [r3, #20]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	2207      	movs	r2, #7
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4019      	ands	r1, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	6898      	ldr	r0, [r3, #8]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	fa00 f203 	lsl.w	r2, r0, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d84f      	bhi.n	80011a0 <HAL_ADC_ConfigChannel+0x28c>
 8001100:	a201      	add	r2, pc, #4	; (adr r2, 8001108 <HAL_ADC_ConfigChannel+0x1f4>)
 8001102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001106:	bf00      	nop
 8001108:	08001119 	.word	0x08001119
 800110c:	0800113b 	.word	0x0800113b
 8001110:	0800115d 	.word	0x0800115d
 8001114:	0800117f 	.word	0x0800117f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800111e:	4b9e      	ldr	r3, [pc, #632]	; (8001398 <HAL_ADC_ConfigChannel+0x484>)
 8001120:	4013      	ands	r3, r2
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	0691      	lsls	r1, r2, #26
 8001128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800112a:	430a      	orrs	r2, r1
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001136:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001138:	e07e      	b.n	8001238 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001140:	4b95      	ldr	r3, [pc, #596]	; (8001398 <HAL_ADC_ConfigChannel+0x484>)
 8001142:	4013      	ands	r3, r2
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	0691      	lsls	r1, r2, #26
 800114a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800114c:	430a      	orrs	r2, r1
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001158:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800115a:	e06d      	b.n	8001238 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001162:	4b8d      	ldr	r3, [pc, #564]	; (8001398 <HAL_ADC_ConfigChannel+0x484>)
 8001164:	4013      	ands	r3, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	0691      	lsls	r1, r2, #26
 800116c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800116e:	430a      	orrs	r2, r1
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800117a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800117c:	e05c      	b.n	8001238 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001184:	4b84      	ldr	r3, [pc, #528]	; (8001398 <HAL_ADC_ConfigChannel+0x484>)
 8001186:	4013      	ands	r3, r2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	0691      	lsls	r1, r2, #26
 800118e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001190:	430a      	orrs	r2, r1
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800119c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800119e:	e04b      	b.n	8001238 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	069b      	lsls	r3, r3, #26
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d107      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	069b      	lsls	r3, r3, #26
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d107      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	069b      	lsls	r3, r3, #26
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d107      	bne.n	800120c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800120a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	069b      	lsls	r3, r3, #26
 800121c:	429a      	cmp	r2, r3
 800121e:	d10a      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800122e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001230:	e001      	b.n	8001236 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001236:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x344>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x344>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <HAL_ADC_ConfigChannel+0x346>
 8001258:	2300      	movs	r3, #0
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 810b 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d00f      	beq.n	8001288 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	400a      	ands	r2, r1
 8001282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001286:	e049      	b.n	800131c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	409a      	lsls	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b09      	cmp	r3, #9
 80012a8:	d91c      	bls.n	80012e4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6999      	ldr	r1, [r3, #24]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	3b1b      	subs	r3, #27
 80012bc:	2207      	movs	r2, #7
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4019      	ands	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6898      	ldr	r0, [r3, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	3b1b      	subs	r3, #27
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	619a      	str	r2, [r3, #24]
 80012e2:	e01b      	b.n	800131c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6959      	ldr	r1, [r3, #20]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_ADC_ConfigChannel+0x488>)
 800131e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b10      	cmp	r3, #16
 8001326:	d105      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d015      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001338:	2b11      	cmp	r3, #17
 800133a:	d105      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800133c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00b      	beq.n	8001360 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800134c:	2b12      	cmp	r3, #18
 800134e:	f040 8092 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 808b 	bne.w	8001476 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001368:	d102      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x45c>
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <HAL_ADC_ConfigChannel+0x48c>)
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e002      	b.n	8001376 <HAL_ADC_ConfigChannel+0x462>
 8001370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001374:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10f      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x490>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b01      	cmp	r3, #1
 8001390:	d108      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x490>
 8001392:	2301      	movs	r3, #1
 8001394:	e007      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x492>
 8001396:	bf00      	nop
 8001398:	83fff000 	.word	0x83fff000
 800139c:	50000300 	.word	0x50000300
 80013a0:	50000100 	.word	0x50000100
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d150      	bne.n	800144c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d010      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x4b8>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x4b8>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_ADC_ConfigChannel+0x4ba>
 80013cc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d13c      	bne.n	800144c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d11d      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x502>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e2:	d118      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_ADC_ConfigChannel+0x57c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_ADC_ConfigChannel+0x580>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9a      	lsrs	r2, r3, #18
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001406:	e002      	b.n	800140e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	3b01      	subs	r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001414:	e02e      	b.n	8001474 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b11      	cmp	r3, #17
 800141c:	d10b      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x522>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001426:	d106      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001432:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001434:	e01e      	b.n	8001474 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b12      	cmp	r3, #18
 800143c:	d11a      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800143e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001448:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800144a:	e013      	b.n	8001474 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f043 0220 	orr.w	r2, r3, #32
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800145e:	e00a      	b.n	8001476 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f043 0220 	orr.w	r2, r3, #32
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001472:	e000      	b.n	8001476 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001474:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800147e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001482:	4618      	mov	r0, r3
 8001484:	376c      	adds	r7, #108	; 0x6c
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83

08001498 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <ADC_Enable+0x2c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <ADC_Enable+0x2c>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <ADC_Enable+0x2e>
 80014c4:	2300      	movs	r3, #0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d143      	bne.n	8001552 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <ADC_Enable+0xc4>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00d      	beq.n	80014f4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f043 0210 	orr.w	r2, r3, #16
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e02f      	b.n	8001554 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001504:	f7ff f9d6 	bl	80008b4 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800150a:	e01b      	b.n	8001544 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800150c:	f7ff f9d2 	bl	80008b4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d914      	bls.n	8001544 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d00d      	beq.n	8001544 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0210 	orr.w	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e007      	b.n	8001554 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d1dc      	bne.n	800150c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	8000003f 	.word	0x8000003f

08001560 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <ADC_Disable+0x2c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <ADC_Disable+0x2c>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <ADC_Disable+0x2e>
 800158c:	2300      	movs	r3, #0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d047      	beq.n	8001622 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 030d 	and.w	r3, r3, #13
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10f      	bne.n	80015c0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0202 	orr.w	r2, r2, #2
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2203      	movs	r2, #3
 80015b6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015b8:	f7ff f97c 	bl	80008b4 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015be:	e029      	b.n	8001614 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f043 0210 	orr.w	r2, r3, #16
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e023      	b.n	8001624 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015dc:	f7ff f96a 	bl	80008b4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d914      	bls.n	8001614 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10d      	bne.n	8001614 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f043 0210 	orr.w	r2, r3, #16
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e007      	b.n	8001624 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b01      	cmp	r3, #1
 8001620:	d0dc      	beq.n	80015dc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001648:	4013      	ands	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x44>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <__NVIC_GetPriorityGrouping+0x18>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	f003 0307 	and.w	r3, r3, #7
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff47 	bl	800162c <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff5c 	bl	8001674 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffb0 	bl	800174c <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e14e      	b.n	8001aa6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	fa01 f303 	lsl.w	r3, r1, r3
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8140 	beq.w	8001aa0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 0201 	and.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	6939      	ldr	r1, [r7, #16]
 8001926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0203 	and.w	r2, r3, #3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 809a 	beq.w	8001aa0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <HAL_GPIO_Init+0x2cc>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a54      	ldr	r2, [pc, #336]	; (8001ac4 <HAL_GPIO_Init+0x2cc>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b52      	ldr	r3, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x2cc>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001984:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019ae:	d013      	beq.n	80019d8 <HAL_GPIO_Init+0x1e0>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a46      	ldr	r2, [pc, #280]	; (8001acc <HAL_GPIO_Init+0x2d4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00d      	beq.n	80019d4 <HAL_GPIO_Init+0x1dc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a45      	ldr	r2, [pc, #276]	; (8001ad0 <HAL_GPIO_Init+0x2d8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d007      	beq.n	80019d0 <HAL_GPIO_Init+0x1d8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a44      	ldr	r2, [pc, #272]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <HAL_GPIO_Init+0x1d4>
 80019c8:	2303      	movs	r3, #3
 80019ca:	e006      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019cc:	2305      	movs	r3, #5
 80019ce:	e004      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d8:	2300      	movs	r3, #0
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	f002 0203 	and.w	r2, r2, #3
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	4093      	lsls	r3, r2
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ea:	4937      	ldr	r1, [pc, #220]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a1c:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a46:	4a24      	ldr	r2, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a70:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a9a:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f aea9 	bne.w	8001808 <HAL_GPIO_Init+0x10>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	48000c00 	.word	0x48000c00
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f000 bef4 	b.w	800293e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 816a 	beq.w	8001e3a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b66:	4bb3      	ldr	r3, [pc, #716]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d00c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b72:	4bb0      	ldr	r3, [pc, #704]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d159      	bne.n	8001c32 <HAL_RCC_OscConfig+0xf6>
 8001b7e:	4bad      	ldr	r3, [pc, #692]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	d152      	bne.n	8001c32 <HAL_RCC_OscConfig+0xf6>
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ba0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0x82>
 8001bb8:	4b9e      	ldr	r3, [pc, #632]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0xae>
 8001bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bda:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001be6:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001bf2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bf6:	fa92 f2a2 	rbit	r2, r2
 8001bfa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001bfe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c02:	fab2 f282 	clz	r2, r2
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	f042 0220 	orr.w	r2, r2, #32
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f002 021f 	and.w	r2, r2, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f202 	lsl.w	r2, r1, r2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 810c 	beq.w	8001e38 <HAL_RCC_OscConfig+0x2fc>
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f040 8106 	bne.w	8001e38 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f000 be86 	b.w	800293e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3c:	d106      	bne.n	8001c4c <HAL_RCC_OscConfig+0x110>
 8001c3e:	4b7d      	ldr	r3, [pc, #500]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7c      	ldr	r2, [pc, #496]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e030      	b.n	8001cae <HAL_RCC_OscConfig+0x172>
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x134>
 8001c56:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a76      	ldr	r2, [pc, #472]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b74      	ldr	r3, [pc, #464]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a73      	ldr	r2, [pc, #460]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01e      	b.n	8001cae <HAL_RCC_OscConfig+0x172>
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c7a:	d10c      	bne.n	8001c96 <HAL_RCC_OscConfig+0x15a>
 8001c7c:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6c      	ldr	r2, [pc, #432]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b6a      	ldr	r3, [pc, #424]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a69      	ldr	r2, [pc, #420]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e00b      	b.n	8001cae <HAL_RCC_OscConfig+0x172>
 8001c96:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a66      	ldr	r2, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b64      	ldr	r3, [pc, #400]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a63      	ldr	r2, [pc, #396]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cae:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f023 020f 	bic.w	r2, r3, #15
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	495d      	ldr	r1, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d059      	beq.n	8001d80 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7fe fdf2 	bl	80008b4 <HAL_GetTick>
 8001cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd6:	f7fe fded 	bl	80008b4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d902      	bls.n	8001cec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f000 be29 	b.w	800293e <HAL_RCC_OscConfig+0xe02>
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d00:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x1e2>
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x20e>
 8001d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d3a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001d52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d56:	fa92 f2a2 	rbit	r2, r2
 8001d5a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001d5e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001d62:	fab2 f282 	clz	r2, r2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f042 0220 	orr.w	r2, r2, #32
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f002 021f 	and.w	r2, r2, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0ab      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x19a>
 8001d7e:	e05c      	b.n	8001e3a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fd98 	bl	80008b4 <HAL_GetTick>
 8001d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8a:	f7fe fd93 	bl	80008b4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d902      	bls.n	8001da0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	f000 bdcf 	b.w	800293e <HAL_RCC_OscConfig+0xe02>
 8001da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001db4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x296>
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x2c2>
 8001dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dda:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001dee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_RCC_OscConfig+0x2f8>)
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e02:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001e06:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e0a:	fa92 f2a2 	rbit	r2, r2
 8001e0e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001e12:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	f002 021f 	and.w	r2, r2, #31
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1ab      	bne.n	8001d8a <HAL_RCC_OscConfig+0x24e>
 8001e32:	e002      	b.n	8001e3a <HAL_RCC_OscConfig+0x2fe>
 8001e34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 816f 	beq.w	8002128 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e4a:	4bd0      	ldr	r3, [pc, #832]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e56:	4bcd      	ldr	r3, [pc, #820]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d16c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x400>
 8001e62:	4bca      	ldr	r3, [pc, #808]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d166      	bne.n	8001f3c <HAL_RCC_OscConfig+0x400>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e78:	fa93 f3a3 	rbit	r3, r3
 8001e7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0x362>
 8001e98:	4bbc      	ldr	r3, [pc, #752]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	e013      	b.n	8001ec6 <HAL_RCC_OscConfig+0x38a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001eb6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ec2:	4bb2      	ldr	r3, [pc, #712]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ecc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ed0:	fa92 f2a2 	rbit	r2, r2
 8001ed4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ed8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f002 021f 	and.w	r2, r2, #31
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	f000 bd1b 	b.w	800293e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4ba0      	ldr	r3, [pc, #640]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	21f8      	movs	r1, #248	; 0xf8
 8001f18:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f20:	fa91 f1a1 	rbit	r1, r1
 8001f24:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001f28:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001f2c:	fab1 f181 	clz	r1, r1
 8001f30:	b2c9      	uxtb	r1, r1
 8001f32:	408b      	lsls	r3, r1
 8001f34:	4995      	ldr	r1, [pc, #596]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	e0f5      	b.n	8002128 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8085 	beq.w	8002052 <HAL_RCC_OscConfig+0x516>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001f5a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2301      	movs	r3, #1
 8001f72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fc9e 	bl	80008b4 <HAL_GetTick>
 8001f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fc99 	bl	80008b4 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f000 bcd5 	b.w	800293e <HAL_RCC_OscConfig+0xe02>
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001fa6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x488>
 8001fbe:	4b73      	ldr	r3, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x4b0>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ff2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ff6:	fa92 f2a2 	rbit	r2, r2
 8001ffa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ffe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0af      	beq.n	8001f7e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201e:	4b5b      	ldr	r3, [pc, #364]	; (800218c <HAL_RCC_OscConfig+0x650>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	21f8      	movs	r1, #248	; 0xf8
 800202e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002036:	fa91 f1a1 	rbit	r1, r1
 800203a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800203e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002042:	fab1 f181 	clz	r1, r1
 8002046:	b2c9      	uxtb	r1, r1
 8002048:	408b      	lsls	r3, r1
 800204a:	4950      	ldr	r1, [pc, #320]	; (800218c <HAL_RCC_OscConfig+0x650>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e06a      	b.n	8002128 <HAL_RCC_OscConfig+0x5ec>
 8002052:	2301      	movs	r3, #1
 8002054:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002064:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002072:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	461a      	mov	r2, r3
 800207a:	2300      	movs	r3, #0
 800207c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7fe fc19 	bl	80008b4 <HAL_GetTick>
 8002082:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002086:	e00a      	b.n	800209e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002088:	f7fe fc14 	bl	80008b4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d902      	bls.n	800209e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	f000 bc50 	b.w	800293e <HAL_RCC_OscConfig+0xe02>
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80020b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_OscConfig+0x592>
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_RCC_OscConfig+0x650>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	e013      	b.n	80020f6 <HAL_RCC_OscConfig+0x5ba>
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020d8:	fa93 f3a3 	rbit	r3, r3
 80020dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_OscConfig+0x650>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	2202      	movs	r2, #2
 80020f8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80020fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002100:	fa92 f2a2 	rbit	r2, r2
 8002104:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002108:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f042 0220 	orr.w	r2, r2, #32
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f002 021f 	and.w	r2, r2, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f202 	lsl.w	r2, r1, r2
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1af      	bne.n	8002088 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80da 	beq.w	80022ec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d069      	beq.n	8002216 <HAL_RCC_OscConfig+0x6da>
 8002142:	2301      	movs	r3, #1
 8002144:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_OscConfig+0x654>)
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	461a      	mov	r2, r3
 8002168:	2301      	movs	r3, #1
 800216a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe fba2 	bl	80008b4 <HAL_GetTick>
 8002170:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002174:	e00e      	b.n	8002194 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe fb9d 	bl	80008b4 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d906      	bls.n	8002194 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e3d9      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	10908120 	.word	0x10908120
 8002194:	2302      	movs	r3, #2
 8002196:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021aa:	2202      	movs	r2, #2
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	4ba5      	ldr	r3, [pc, #660]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80021d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021de:	2102      	movs	r1, #2
 80021e0:	6019      	str	r1, [r3, #0]
 80021e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	fa93 f1a3 	rbit	r1, r3
 80021ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021f0:	6019      	str	r1, [r3, #0]
  return result;
 80021f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	2101      	movs	r1, #1
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0b0      	beq.n	8002176 <HAL_RCC_OscConfig+0x63a>
 8002214:	e06a      	b.n	80022ec <HAL_RCC_OscConfig+0x7b0>
 8002216:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	fa93 f2a3 	rbit	r2, r3
 8002228:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800222c:	601a      	str	r2, [r3, #0]
  return result;
 800222e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002232:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	4b8c      	ldr	r3, [pc, #560]	; (8002470 <HAL_RCC_OscConfig+0x934>)
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	461a      	mov	r2, r3
 8002244:	2300      	movs	r3, #0
 8002246:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7fe fb34 	bl	80008b4 <HAL_GetTick>
 800224c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	e009      	b.n	8002266 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002252:	f7fe fb2f 	bl	80008b4 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e36b      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 8002266:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800226a:	2202      	movs	r2, #2
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002282:	2202      	movs	r2, #2
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800229a:	2202      	movs	r2, #2
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ae:	4b6f      	ldr	r3, [pc, #444]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80022b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022b6:	2102      	movs	r1, #2
 80022b8:	6019      	str	r1, [r3, #0]
 80022ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f1a3 	rbit	r1, r3
 80022c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022c8:	6019      	str	r1, [r3, #0]
  return result;
 80022ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1b2      	bne.n	8002252 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8158 	beq.w	80025ac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b5a      	ldr	r3, [pc, #360]	; (800246c <HAL_RCC_OscConfig+0x930>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d112      	bne.n	8002334 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x930>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a56      	ldr	r2, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x930>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b54      	ldr	r3, [pc, #336]	; (800246c <HAL_RCC_OscConfig+0x930>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_RCC_OscConfig+0x938>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11a      	bne.n	8002376 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002340:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_RCC_OscConfig+0x938>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a4b      	ldr	r2, [pc, #300]	; (8002474 <HAL_RCC_OscConfig+0x938>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234c:	f7fe fab2 	bl	80008b4 <HAL_GetTick>
 8002350:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	e009      	b.n	800236a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002356:	f7fe faad 	bl	80008b4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2e9      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_OscConfig+0x938>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0ef      	beq.n	8002356 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x852>
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_RCC_OscConfig+0x930>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a39      	ldr	r2, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x930>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02f      	b.n	80023ee <HAL_RCC_OscConfig+0x8b2>
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x876>
 8002398:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_OscConfig+0x930>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a33      	ldr	r2, [pc, #204]	; (800246c <HAL_RCC_OscConfig+0x930>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a30      	ldr	r2, [pc, #192]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e01d      	b.n	80023ee <HAL_RCC_OscConfig+0x8b2>
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x89a>
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	6213      	str	r3, [r2, #32]
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_OscConfig+0x8b2>
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a21      	ldr	r2, [pc, #132]	; (800246c <HAL_RCC_OscConfig+0x930>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d06b      	beq.n	80024d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f8:	f7fe fa5c 	bl	80008b4 <HAL_GetTick>
 80023fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fa57 	bl	80008b4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e291      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 800241a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800241e:	2202      	movs	r2, #2
 8002420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002436:	2202      	movs	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fa93 f2a3 	rbit	r2, r3
 8002444:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002448:	601a      	str	r2, [r3, #0]
  return result;
 800244a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800244e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d109      	bne.n	8002478 <HAL_RCC_OscConfig+0x93c>
 8002464:	4b01      	ldr	r3, [pc, #4]	; (800246c <HAL_RCC_OscConfig+0x930>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x958>
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	10908120 	.word	0x10908120
 8002474:	40007000 	.word	0x40007000
 8002478:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	4bbb      	ldr	r3, [pc, #748]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002498:	2102      	movs	r1, #2
 800249a:	6011      	str	r1, [r2, #0]
 800249c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	fa92 f1a2 	rbit	r1, r2
 80024a6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024aa:	6011      	str	r1, [r2, #0]
  return result;
 80024ac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	fab2 f282 	clz	r2, r2
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f002 021f 	and.w	r2, r2, #31
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f202 	lsl.w	r2, r1, r2
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d099      	beq.n	8002402 <HAL_RCC_OscConfig+0x8c6>
 80024ce:	e063      	b.n	8002598 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe f9f0 	bl	80008b4 <HAL_GetTick>
 80024d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe f9eb 	bl	80008b4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e225      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 80024f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800250e:	2202      	movs	r2, #2
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002520:	601a      	str	r2, [r3, #0]
  return result;
 8002522:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002526:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f043 0302 	orr.w	r3, r3, #2
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d102      	bne.n	8002542 <HAL_RCC_OscConfig+0xa06>
 800253c:	4b90      	ldr	r3, [pc, #576]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	e00d      	b.n	800255e <HAL_RCC_OscConfig+0xa22>
 8002542:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002546:	2202      	movs	r2, #2
 8002548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	fa93 f2a3 	rbit	r2, r3
 8002554:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	4b89      	ldr	r3, [pc, #548]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002562:	2102      	movs	r1, #2
 8002564:	6011      	str	r1, [r2, #0]
 8002566:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	fa92 f1a2 	rbit	r1, r2
 8002570:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002574:	6011      	str	r1, [r2, #0]
  return result;
 8002576:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fab2 f282 	clz	r2, r2
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f002 021f 	and.w	r2, r2, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1a0      	bne.n	80024da <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002598:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b77      	ldr	r3, [pc, #476]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a76      	ldr	r2, [pc, #472]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 81c2 	beq.w	800293c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b8:	4b71      	ldr	r3, [pc, #452]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 030c 	and.w	r3, r3, #12
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	f000 819c 	beq.w	80028fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	f040 8114 	bne.w	80027fa <HAL_RCC_OscConfig+0xcbe>
 80025d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	fa93 f2a3 	rbit	r2, r3
 80025e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025ea:	601a      	str	r2, [r3, #0]
  return result;
 80025ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	461a      	mov	r2, r3
 8002604:	2300      	movs	r3, #0
 8002606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe f954 	bl	80008b4 <HAL_GetTick>
 800260c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002610:	e009      	b.n	8002626 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe f94f 	bl	80008b4 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e18b      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 8002626:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800262a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800262e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fa93 f2a3 	rbit	r2, r3
 800263a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800263e:	601a      	str	r2, [r3, #0]
  return result;
 8002640:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002644:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_RCC_OscConfig+0xb24>
 800265a:	4b49      	ldr	r3, [pc, #292]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0xb5c>
 8002660:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800267e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800269c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	fa92 f1a2 	rbit	r1, r2
 80026ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026b0:	6011      	str	r1, [r2, #0]
  return result;
 80026b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fab2 f282 	clz	r2, r2
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	f042 0220 	orr.w	r2, r2, #32
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	f002 021f 	and.w	r2, r2, #31
 80026c8:	2101      	movs	r1, #1
 80026ca:	fa01 f202 	lsl.w	r2, r1, r2
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d19e      	bne.n	8002612 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	4925      	ldr	r1, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	604b      	str	r3, [r1, #4]
 80026f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	fa93 f2a3 	rbit	r2, r3
 8002704:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002708:	601a      	str	r2, [r3, #0]
  return result;
 800270a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800270e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800271a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	461a      	mov	r2, r3
 8002722:	2301      	movs	r3, #1
 8002724:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7fe f8c5 	bl	80008b4 <HAL_GetTick>
 800272a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272e:	e009      	b.n	8002744 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe f8c0 	bl	80008b4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0fc      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 8002744:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800275c:	601a      	str	r2, [r3, #0]
  return result;
 800275e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002762:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d105      	bne.n	8002784 <HAL_RCC_OscConfig+0xc48>
 8002778:	4b01      	ldr	r3, [pc, #4]	; (8002780 <HAL_RCC_OscConfig+0xc44>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e01e      	b.n	80027bc <HAL_RCC_OscConfig+0xc80>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_OscConfig+0xe0c>)
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027c4:	6011      	str	r1, [r2, #0]
 80027c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	fa92 f1a2 	rbit	r1, r2
 80027d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027d4:	6011      	str	r1, [r2, #0]
  return result;
 80027d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f002 021f 	and.w	r2, r2, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d09b      	beq.n	8002730 <HAL_RCC_OscConfig+0xbf4>
 80027f8:	e0a0      	b.n	800293c <HAL_RCC_OscConfig+0xe00>
 80027fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002818:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002824:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	461a      	mov	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe f840 	bl	80008b4 <HAL_GetTick>
 8002834:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002838:	e009      	b.n	800284e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe f83b 	bl	80008b4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e077      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
 800284e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002852:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002856:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002866:	601a      	str	r2, [r3, #0]
  return result;
 8002868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d102      	bne.n	8002888 <HAL_RCC_OscConfig+0xd4c>
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_OscConfig+0xe0c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	e01b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd84>
 8002888:	f107 0320 	add.w	r3, r7, #32
 800288c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f107 0320 	add.w	r3, r7, #32
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	fa93 f2a3 	rbit	r2, r3
 800289c:	f107 031c 	add.w	r3, r7, #28
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b22      	ldr	r3, [pc, #136]	; (8002948 <HAL_RCC_OscConfig+0xe0c>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f107 0210 	add.w	r2, r7, #16
 80028c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028c8:	6011      	str	r1, [r2, #0]
 80028ca:	f107 0210 	add.w	r2, r7, #16
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	fa92 f1a2 	rbit	r1, r2
 80028d4:	f107 020c 	add.w	r2, r7, #12
 80028d8:	6011      	str	r1, [r2, #0]
  return result;
 80028da:	f107 020c 	add.w	r2, r7, #12
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d19e      	bne.n	800283a <HAL_RCC_OscConfig+0xcfe>
 80028fc:	e01e      	b.n	800293c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e018      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_RCC_OscConfig+0xe0c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002914:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800291c:	1d3b      	adds	r3, r7, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	429a      	cmp	r2, r3
 8002924:	d108      	bne.n	8002938 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002926:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800292a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b09e      	sub	sp, #120	; 0x78
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e162      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b90      	ldr	r3, [pc, #576]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	498b      	ldr	r1, [pc, #556]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e14a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b82      	ldr	r3, [pc, #520]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	497f      	ldr	r1, [pc, #508]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80dc 	beq.w	8002b78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d13c      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xf6>
 80029c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xa6>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	e00f      	b.n	8002a12 <HAL_RCC_ClockConfig+0xc6>
 80029f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a04:	663b      	str	r3, [r7, #96]	; 0x60
 8002a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a0e:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a16:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a1a:	fa92 f2a2 	rbit	r2, r2
 8002a1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d17b      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0f3      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d13c      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x178>
 8002a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x128>
 8002a6e:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e00f      	b.n	8002a94 <HAL_RCC_ClockConfig+0x148>
 8002a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
 8002a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
 8002a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a98:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a9c:	fa92 f2a2 	rbit	r2, r2
 8002aa0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13a      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b2      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_ClockConfig+0x1a0>
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	e00d      	b.n	8002b08 <HAL_RCC_ClockConfig+0x1bc>
 8002aec:	2302      	movs	r3, #2
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2202      	movs	r2, #2
 8002b0a:	61ba      	str	r2, [r7, #24]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	fa92 f2a2 	rbit	r2, r2
 8002b12:	617a      	str	r2, [r7, #20]
  return result;
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	fab2 f282 	clz	r2, r2
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f042 0220 	orr.w	r2, r2, #32
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f002 021f 	and.w	r2, r2, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e079      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	491a      	ldr	r1, [pc, #104]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fd feb4 	bl	80008b4 <HAL_GetTick>
 8002b4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fd feb0 	bl	80008b4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e061      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d214      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4906      	ldr	r1, [pc, #24]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e040      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	491a      	ldr	r1, [pc, #104]	; (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4912      	ldr	r1, [pc, #72]	; (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bee:	f000 f829 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfc:	22f0      	movs	r2, #240	; 0xf0
 8002bfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	60fa      	str	r2, [r7, #12]
  return result;
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	40d3      	lsrs	r3, r2
 8002c12:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x2ec>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_RCC_ClockConfig+0x2f0>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_RCC_ClockConfig+0x2f4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fe02 	bl	800082c <HAL_InitTick>
  
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3778      	adds	r7, #120	; 0x78
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08003f70 	.word	0x08003f70
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b08b      	sub	sp, #44	; 0x2c
 8002c48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c5e:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x30>
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x36>
 8002c72:	e03c      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c76:	623b      	str	r3, [r7, #32]
      break;
 8002c78:	e03c      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	fa92 f2a2 	rbit	r2, r2
 8002c8c:	607a      	str	r2, [r7, #4]
  return result;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	fab2 f282 	clz	r2, r2
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	40d3      	lsrs	r3, r2
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
 8002c9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	fa92 f2a2 	rbit	r2, r2
 8002cb0:	60fa      	str	r2, [r7, #12]
  return result;
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	fab2 f282 	clz	r2, r2
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	40d3      	lsrs	r3, r2
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
 8002cc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ccc:	4a0e      	ldr	r2, [pc, #56]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	623b      	str	r3, [r7, #32]
      break;
 8002cec:	e002      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cf0:	623b      	str	r3, [r7, #32]
      break;
 8002cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	372c      	adds	r7, #44	; 0x2c
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	007a1200 	.word	0x007a1200
 8002d0c:	08003f80 	.word	0x08003f80
 8002d10:	08003f90 	.word	0x08003f90
 8002d14:	003d0900 	.word	0x003d0900

08002d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b092      	sub	sp, #72	; 0x48
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80cd 	beq.w	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3c:	4b86      	ldr	r3, [pc, #536]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10e      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	4b83      	ldr	r3, [pc, #524]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	4a82      	ldr	r2, [pc, #520]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d52:	61d3      	str	r3, [r2, #28]
 8002d54:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b7d      	ldr	r3, [pc, #500]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d72:	4b7a      	ldr	r3, [pc, #488]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a79      	ldr	r2, [pc, #484]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fd fd99 	bl	80008b4 <HAL_GetTick>
 8002d82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d84:	e008      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d86:	f7fd fd95 	bl	80008b4 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d901      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0db      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b70      	ldr	r3, [pc, #448]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002da4:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d07d      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d076      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dc2:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	461a      	mov	r2, r3
 8002dec:	2301      	movs	r3, #1
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2300      	movs	r3, #0
 8002e12:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e14:	4a50      	ldr	r2, [pc, #320]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e18:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d045      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fd fd46 	bl	80008b4 <HAL_GetTick>
 8002e28:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fd fd42 	bl	80008b4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e086      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002e42:	2302      	movs	r3, #2
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	2302      	movs	r3, #2
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	61fb      	str	r3, [r7, #28]
  return result;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	fab3 f383 	clz	r3, r3
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d102      	bne.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e70:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	e007      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	2202      	movs	r2, #2
 8002e88:	613a      	str	r2, [r7, #16]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	fa92 f2a2 	rbit	r2, r2
 8002e90:	60fa      	str	r2, [r7, #12]
  return result;
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0bd      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4926      	ldr	r1, [pc, #152]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	491a      	ldr	r1, [pc, #104]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f023 0210 	bic.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4912      	ldr	r1, [pc, #72]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	490b      	ldr	r1, [pc, #44]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4903      	ldr	r1, [pc, #12]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3748      	adds	r7, #72	; 0x48
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	10908100 	.word	0x10908100

08002f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e049      	b.n	800300a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fb80 	bl	8000690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 fb60 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e049      	b.n	80030b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f841 	bl	80030c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4610      	mov	r0, r2
 8003052:	f000 fb09 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <HAL_TIM_PWM_Start+0x24>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e03c      	b.n	8003172 <HAL_TIM_PWM_Start+0x9e>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d109      	bne.n	8003112 <HAL_TIM_PWM_Start+0x3e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	e02f      	b.n	8003172 <HAL_TIM_PWM_Start+0x9e>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b08      	cmp	r3, #8
 8003116:	d109      	bne.n	800312c <HAL_TIM_PWM_Start+0x58>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b01      	cmp	r3, #1
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e022      	b.n	8003172 <HAL_TIM_PWM_Start+0x9e>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d109      	bne.n	8003146 <HAL_TIM_PWM_Start+0x72>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e015      	b.n	8003172 <HAL_TIM_PWM_Start+0x9e>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d109      	bne.n	8003160 <HAL_TIM_PWM_Start+0x8c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e008      	b.n	8003172 <HAL_TIM_PWM_Start+0x9e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e088      	b.n	800328c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_TIM_PWM_Start+0xb6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003188:	e023      	b.n	80031d2 <HAL_TIM_PWM_Start+0xfe>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d104      	bne.n	800319a <HAL_TIM_PWM_Start+0xc6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	e01b      	b.n	80031d2 <HAL_TIM_PWM_Start+0xfe>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d104      	bne.n	80031aa <HAL_TIM_PWM_Start+0xd6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	e013      	b.n	80031d2 <HAL_TIM_PWM_Start+0xfe>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_PWM_Start+0xe6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b8:	e00b      	b.n	80031d2 <HAL_TIM_PWM_Start+0xfe>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d104      	bne.n	80031ca <HAL_TIM_PWM_Start+0xf6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c8:	e003      	b.n	80031d2 <HAL_TIM_PWM_Start+0xfe>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	6839      	ldr	r1, [r7, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fdfc 	bl	8003dd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <HAL_TIM_PWM_Start+0x1c0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_TIM_PWM_Start+0x134>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2a      	ldr	r2, [pc, #168]	; (8003298 <HAL_TIM_PWM_Start+0x1c4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_TIM_PWM_Start+0x134>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <HAL_TIM_PWM_Start+0x1c8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_PWM_Start+0x134>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <HAL_TIM_PWM_Start+0x1cc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_TIM_PWM_Start+0x138>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_TIM_PWM_Start+0x13a>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d007      	beq.n	8003222 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1b      	ldr	r2, [pc, #108]	; (8003294 <HAL_TIM_PWM_Start+0x1c0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_TIM_PWM_Start+0x176>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d009      	beq.n	800324a <HAL_TIM_PWM_Start+0x176>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <HAL_TIM_PWM_Start+0x1d0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIM_PWM_Start+0x176>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_TIM_PWM_Start+0x1c4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d115      	bne.n	8003276 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_TIM_PWM_Start+0x1d4>)
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d015      	beq.n	8003288 <HAL_TIM_PWM_Start+0x1b4>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003262:	d011      	beq.n	8003288 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e008      	b.n	8003288 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e000      	b.n	800328a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800
 80032a4:	40000400 	.word	0x40000400
 80032a8:	00010007 	.word	0x00010007

080032ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0ff      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b14      	cmp	r3, #20
 80032d6:	f200 80f0 	bhi.w	80034ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003335 	.word	0x08003335
 80032e4:	080034bb 	.word	0x080034bb
 80032e8:	080034bb 	.word	0x080034bb
 80032ec:	080034bb 	.word	0x080034bb
 80032f0:	08003375 	.word	0x08003375
 80032f4:	080034bb 	.word	0x080034bb
 80032f8:	080034bb 	.word	0x080034bb
 80032fc:	080034bb 	.word	0x080034bb
 8003300:	080033b7 	.word	0x080033b7
 8003304:	080034bb 	.word	0x080034bb
 8003308:	080034bb 	.word	0x080034bb
 800330c:	080034bb 	.word	0x080034bb
 8003310:	080033f7 	.word	0x080033f7
 8003314:	080034bb 	.word	0x080034bb
 8003318:	080034bb 	.word	0x080034bb
 800331c:	080034bb 	.word	0x080034bb
 8003320:	08003439 	.word	0x08003439
 8003324:	080034bb 	.word	0x080034bb
 8003328:	080034bb 	.word	0x080034bb
 800332c:	080034bb 	.word	0x080034bb
 8003330:	08003479 	.word	0x08003479
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fa0c 	bl	8003758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699a      	ldr	r2, [r3, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0208 	orr.w	r2, r2, #8
 800334e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0204 	bic.w	r2, r2, #4
 800335e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6999      	ldr	r1, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	619a      	str	r2, [r3, #24]
      break;
 8003372:	e0a5      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fa72 	bl	8003864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800338e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	021a      	lsls	r2, r3, #8
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	619a      	str	r2, [r3, #24]
      break;
 80033b4:	e084      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fad1 	bl	8003964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0208 	orr.w	r2, r2, #8
 80033d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0204 	bic.w	r2, r2, #4
 80033e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69d9      	ldr	r1, [r3, #28]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      break;
 80033f4:	e064      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fb2f 	bl	8003a60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	021a      	lsls	r2, r3, #8
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	61da      	str	r2, [r3, #28]
      break;
 8003436:	e043      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fb72 	bl	8003b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003476:	e023      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fbb0 	bl	8003be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	021a      	lsls	r2, r3, #8
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034b8:	e002      	b.n	80034c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
      break;
 80034be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop

080034d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0b6      	b.n	800365e <HAL_TIM_ConfigClockSource+0x18a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800351a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352c:	d03e      	beq.n	80035ac <HAL_TIM_ConfigClockSource+0xd8>
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	f200 8087 	bhi.w	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353a:	f000 8086 	beq.w	800364a <HAL_TIM_ConfigClockSource+0x176>
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	d87f      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d01a      	beq.n	800357e <HAL_TIM_ConfigClockSource+0xaa>
 8003548:	2b70      	cmp	r3, #112	; 0x70
 800354a:	d87b      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d050      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003550:	2b60      	cmp	r3, #96	; 0x60
 8003552:	d877      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d03c      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003558:	2b50      	cmp	r3, #80	; 0x50
 800355a:	d873      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d058      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0x13e>
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d86f      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d064      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 8003568:	2b30      	cmp	r3, #48	; 0x30
 800356a:	d86b      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d060      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 8003570:	2b20      	cmp	r3, #32
 8003572:	d867      	bhi.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d05c      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 8003578:	2b10      	cmp	r3, #16
 800357a:	d05a      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x15e>
 800357c:	e062      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f000 fc03 	bl	8003d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	609a      	str	r2, [r3, #8]
      break;
 80035aa:	e04f      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f000 fbec 	bl	8003d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ce:	609a      	str	r2, [r3, #8]
      break;
 80035d0:	e03c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	461a      	mov	r2, r3
 80035e0:	f000 fb60 	bl	8003ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2150      	movs	r1, #80	; 0x50
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fbb9 	bl	8003d62 <TIM_ITRx_SetConfig>
      break;
 80035f0:	e02c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	461a      	mov	r2, r3
 8003600:	f000 fb7f 	bl	8003d02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2160      	movs	r1, #96	; 0x60
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fba9 	bl	8003d62 <TIM_ITRx_SetConfig>
      break;
 8003610:	e01c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 fb40 	bl	8003ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb99 	bl	8003d62 <TIM_ITRx_SetConfig>
      break;
 8003630:	e00c      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f000 fb90 	bl	8003d62 <TIM_ITRx_SetConfig>
      break;
 8003642:	e003      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e000      	b.n	800364c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800364a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a32      	ldr	r2, [pc, #200]	; (8003744 <TIM_Base_SetConfig+0xdc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0x28>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0x28>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a2f      	ldr	r2, [pc, #188]	; (8003748 <TIM_Base_SetConfig+0xe0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <TIM_Base_SetConfig+0xdc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <TIM_Base_SetConfig+0x6a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b0:	d00f      	beq.n	80036d2 <TIM_Base_SetConfig+0x6a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a24      	ldr	r2, [pc, #144]	; (8003748 <TIM_Base_SetConfig+0xe0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00b      	beq.n	80036d2 <TIM_Base_SetConfig+0x6a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a23      	ldr	r2, [pc, #140]	; (800374c <TIM_Base_SetConfig+0xe4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_Base_SetConfig+0x6a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <TIM_Base_SetConfig+0xe8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_Base_SetConfig+0x6a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <TIM_Base_SetConfig+0xec>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <TIM_Base_SetConfig+0xdc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00b      	beq.n	8003728 <TIM_Base_SetConfig+0xc0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0e      	ldr	r2, [pc, #56]	; (800374c <TIM_Base_SetConfig+0xe4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_Base_SetConfig+0xc0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <TIM_Base_SetConfig+0xe8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0xc0>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a0c      	ldr	r2, [pc, #48]	; (8003754 <TIM_Base_SetConfig+0xec>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	615a      	str	r2, [r3, #20]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40014000 	.word	0x40014000
 8003750:	40014400 	.word	0x40014400
 8003754:	40014800 	.word	0x40014800

08003758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f023 0302 	bic.w	r3, r3, #2
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a28      	ldr	r2, [pc, #160]	; (8003854 <TIM_OC1_SetConfig+0xfc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_OC1_SetConfig+0x78>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_OC1_SetConfig+0x100>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <TIM_OC1_SetConfig+0x78>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_OC1_SetConfig+0x104>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_OC1_SetConfig+0x78>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_OC1_SetConfig+0x108>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0308 	bic.w	r3, r3, #8
 80037d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a19      	ldr	r2, [pc, #100]	; (8003854 <TIM_OC1_SetConfig+0xfc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00b      	beq.n	800380a <TIM_OC1_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a18      	ldr	r2, [pc, #96]	; (8003858 <TIM_OC1_SetConfig+0x100>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d007      	beq.n	800380a <TIM_OC1_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <TIM_OC1_SetConfig+0x104>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d003      	beq.n	800380a <TIM_OC1_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a16      	ldr	r2, [pc, #88]	; (8003860 <TIM_OC1_SetConfig+0x108>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4313      	orrs	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	621a      	str	r2, [r3, #32]
}
 8003848:	bf00      	nop
 800384a:	371c      	adds	r7, #28
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40014000 	.word	0x40014000
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800

08003864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0210 	bic.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800389e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 0320 	bic.w	r3, r3, #32
 80038b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a24      	ldr	r2, [pc, #144]	; (8003954 <TIM_OC2_SetConfig+0xf0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10d      	bne.n	80038e4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <TIM_OC2_SetConfig+0xf0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00b      	beq.n	8003904 <TIM_OC2_SetConfig+0xa0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <TIM_OC2_SetConfig+0xf4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_OC2_SetConfig+0xa0>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a19      	ldr	r2, [pc, #100]	; (800395c <TIM_OC2_SetConfig+0xf8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_OC2_SetConfig+0xa0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <TIM_OC2_SetConfig+0xfc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d113      	bne.n	800392c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003912:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <TIM_OC3_SetConfig+0xec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10d      	bne.n	80039e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039e0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <TIM_OC3_SetConfig+0xec>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <TIM_OC3_SetConfig+0x9e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <TIM_OC3_SetConfig+0xf0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d007      	beq.n	8003a02 <TIM_OC3_SetConfig+0x9e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <TIM_OC3_SetConfig+0xf4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC3_SetConfig+0x9e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <TIM_OC3_SetConfig+0xf8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d113      	bne.n	8003a2a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	621a      	str	r2, [r3, #32]
}
 8003a44:	bf00      	nop
 8003a46:	371c      	adds	r7, #28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <TIM_OC4_SetConfig+0xb8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <TIM_OC4_SetConfig+0x7c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <TIM_OC4_SetConfig+0xbc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <TIM_OC4_SetConfig+0x7c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <TIM_OC4_SetConfig+0xc0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d003      	beq.n	8003adc <TIM_OC4_SetConfig+0x7c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <TIM_OC4_SetConfig+0xc4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d109      	bne.n	8003af0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	019b      	lsls	r3, r3, #6
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800

08003b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	041b      	lsls	r3, r3, #16
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <TIM_OC5_SetConfig+0xac>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_OC5_SetConfig+0x72>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <TIM_OC5_SetConfig+0xb0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_OC5_SetConfig+0x72>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <TIM_OC5_SetConfig+0xb4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_OC5_SetConfig+0x72>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <TIM_OC5_SetConfig+0xb8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d109      	bne.n	8003bae <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800

08003be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	051b      	lsls	r3, r3, #20
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a16      	ldr	r2, [pc, #88]	; (8003c94 <TIM_OC6_SetConfig+0xb0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <TIM_OC6_SetConfig+0x74>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a15      	ldr	r2, [pc, #84]	; (8003c98 <TIM_OC6_SetConfig+0xb4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_OC6_SetConfig+0x74>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <TIM_OC6_SetConfig+0xb8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_OC6_SetConfig+0x74>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <TIM_OC6_SetConfig+0xbc>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d109      	bne.n	8003c6c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	029b      	lsls	r3, r3, #10
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40014400 	.word	0x40014400
 8003ca0:	40014800 	.word	0x40014800

08003ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	f023 0201 	bic.w	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 030a 	bic.w	r3, r3, #10
 8003ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b087      	sub	sp, #28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0210 	bic.w	r2, r3, #16
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f043 0307 	orr.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	021a      	lsls	r2, r3, #8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2201      	movs	r2, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e054      	b.n	8003ee6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d108      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d009      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a11      	ldr	r2, [pc, #68]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40014000 	.word	0x40014000

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4d0d      	ldr	r5, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1b64      	subs	r4, r4, r5
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2600      	movs	r6, #0
 8003f0c:	42a6      	cmp	r6, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4d0b      	ldr	r5, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f000 f820 	bl	8003f58 <_init>
 8003f18:	1b64      	subs	r4, r4, r5
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2600      	movs	r6, #0
 8003f1e:	42a6      	cmp	r6, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f28:	4798      	blx	r3
 8003f2a:	3601      	adds	r6, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f32:	4798      	blx	r3
 8003f34:	3601      	adds	r6, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	08003fa0 	.word	0x08003fa0
 8003f3c:	08003fa0 	.word	0x08003fa0
 8003f40:	08003fa0 	.word	0x08003fa0
 8003f44:	08003fa4 	.word	0x08003fa4

08003f48 <memset>:
 8003f48:	4402      	add	r2, r0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	f803 1b01 	strb.w	r1, [r3], #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
